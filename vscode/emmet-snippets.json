{
    "NodeJS Main": {
        "prefix": "njs",
        "body": [
            "import express from 'express';",
            "import mongoose from 'mongoose';",
            "import 'dotenv/config.js';",
            "",
            "// Import Routes",
            "import ${itemsApi}Route from './routes/api/items.js';",
            "",
            "// Inits & Globals",
            "const app = express(); const port = process.env.PORT || 5000;",
            "",
            "// Connect to DB",
            "mongoose.connect(process.env.DB_CONNECTION,{ useNewUrlParser: true, useUnifiedTopology: true}).then(() => console.log('» Connected to DB')).catch(error => console.log(error));",
            "",
            "// Middlewares",
            "app.use(express.json());",
            "",
            "// Use Routes",
            "app.use('/${path}', ${itemsApi}Route);",
            "",
            "app.get('/', (req, res) => res.send('Hello World'));",
            "app.listen(port, () => console.log(`» Running at http://localhost:\\${port}`));",
        ],
        "description": "Create NodeJS Boilerplate"
    },
    "NodeJS Route": {
        "prefix": "nroute",
        "body": [
            "import express from 'express'; import ${ItemSchema} from '../../models/${ItemSchema}.js';",
            "",
            "const router = express.Router();",
            "",
            "// @route   POST api/items/",
            "// @desc    Post an item",
            "// @access  Public",
            "router.post('/', async (req, res) => {const ${newItem} = new ${ItemSchema}({name: req.body.name,});",
            "",
            "try {const ${savedItem} = await ${newItem}.save(); res.send(${savedItem});} catch (error) {res.status(400).send(error);}});",
            "",
            "// @route   GET api/items/",
            "// @desc    Get all items",
            "// @access  Public",
            "router.get('/', async (req, res) => {try {const foundItem = await ItemSchema.find().sort({ date: -1 });res.send(foundItem);} catch (error) {res.status(400).send(error);}});",
            "",
            "// @route   GET api/items/:id",
            "// @desc    Get an item",
            "// @access  Public",
            "router.get('/:id', async (req, res) => {try {const foundItem = await ItemSchema.findById(req.params.id);res.send(foundItem);} catch (error) {res.status(404).send(error);}});",
            "",
            "// @route   DELETE api/items/:id",
            "// @desc    Delete an item",
            "// @access  Public",
            "router.delete('/:id', async (req, res) => {try {const foundItem = await ItemSchema.findById(req.params.id);const deletedItem = await foundItem.remove();res.send(`Item \\${deletedItem} removed`);} catch (error) {res.status(404).send(error);}});",
            "",
            "export default router;",
        ],
        "description": "Create NodeJS Route Boilerplate"
    },
    "NodeJS Schema": {
        "prefix": "nschema",
        "body": [
            "import mongoose from 'mongoose';",
            "const ${Item}Schema = mongoose.Schema({name: {type: String, required: true, min: 6,},date: {type: Date,default: Date.now,},});",
            "",
            "export default mongoose.model('${Item}', ${Item}Schema);"
        ],
        "description": "Create NodeJS Mongoose Schema Boilerplate"
    },
    "Console": {
        "prefix": "cl",
        "body": "console.${1|log,warn,error,trace,debug,timestamp|}($2);",
        "description": "Log output to console"
    },
    "React Function": {
        "prefix": "rf",
        "body": [
            "import React from 'react'",
            "",
            "export const $1 = () => {",
            "return <div>$0</div>",
            "}"
        ],
        "description": "Basic React function"
    }
}